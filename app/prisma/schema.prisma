generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/social_media_approval_app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
enum UserRole {
  ADMIN_AGENCY
  EMPLOYEE_AGENCY
  CLIENT
}

enum ContentType {
  IMAGE
  CAROUSEL
  VIDEO
  STORY
}

enum Platform {
  INSTAGRAM
  FACEBOOK
  TIKTOK
  YOUTUBE
}

enum ContentStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REVISION_REQUESTED
  REJECTED
  PUBLISHED
}

enum NotificationType {
  CONTENT_CREATED
  APPROVAL_REQUESTED
  CONTENT_APPROVED
  REVISION_REQUESTED
  CONTENT_REJECTED
  CONTENT_PUBLISHED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CLIENT)
  companyName   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // App relations
  createdContents Content[] @relation("ContentCreator")
  assignedContents Content[] @relation("ContentAssignee")
  approvals     Approval[]
  comments      Comment[]
  notifications Notification[] @relation("NotificationRecipient")
  sentNotifications Notification[] @relation("NotificationSender")
  documents     Document[]
  
  // Client relationship (agency manages clients)
  managedClients User[] @relation("AgencyClient")
  agencyManager  User?  @relation("AgencyClient", fields: [agencyManagerId], references: [id])
  agencyManagerId String?

  @@map("users")
}

model Content {
  id            String        @id @default(cuid())
  title         String
  description   String?
  caption       String?
  contentType   ContentType
  platforms     Platform[]
  mediaUrls     String[]      @default([])
  thumbnailUrl  String?
  status        ContentStatus @default(DRAFT)
  scheduledDate DateTime?
  publishedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  creatorId     String
  creator       User          @relation("ContentCreator", fields: [creatorId], references: [id])
  assigneeId    String?
  assignee      User?         @relation("ContentAssignee", fields: [assigneeId], references: [id])
  
  approvals     Approval[]
  comments      Comment[]
  notifications Notification[]

  @@map("contents")
}

model Approval {
  id          String    @id @default(cuid())
  approved    Boolean?
  feedback    String?
  approvedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  contentId   String
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  approverId  String
  approver    User      @relation(fields: [approverId], references: [id])

  @@map("approvals")
}

model Comment {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  @@map("comments")
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  
  // Relations
  recipientId String
  recipient   User             @relation("NotificationRecipient", fields: [recipientId], references: [id])
  senderId    String?
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [id])
  contentId   String?
  content     Content?         @relation(fields: [contentId], references: [id])

  @@map("notifications")
}

model Document {
  id          String   @id @default(cuid())
  name        String
  fileUrl     String
  fileSize    Int?
  mimeType    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id])

  @@map("documents")
}
